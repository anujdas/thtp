#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module THTP
  module Test
    class FancyStruct
      include ::Thrift::Struct, ::Thrift::Struct_Union
      S = 1
      MAPPING = 2

      FIELDS = {
        S => {:type => ::Thrift::Types::STRING, :name => 's'},
        MAPPING => {:type => ::Thrift::Types::MAP, :name => 'mapping', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RetVal < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def strings(val)
          RetVal.new(:strings, val)
        end

        def number(val)
          RetVal.new(:number, val)
        end
      end

      STRINGS = 2
      NUMBER = 1

      FIELDS = {
        STRINGS => {:type => ::Thrift::Types::LIST, :name => 'strings', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        NUMBER => {:type => ::Thrift::Types::I32, :name => 'number', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class Oops < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROBLEM = 1

      FIELDS = {
        PROBLEM => {:type => ::Thrift::Types::STRUCT, :name => 'problem', :class => ::THTP::Test::FancyStruct}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OhNo < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
